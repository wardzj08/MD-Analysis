# Creates list of atoms to display
# Writes a proper expression for boolean selection in ovito
# Particularly as Ovito only allows one value per selection statement,
# and each statement must be seperated by an or operator, this is helpful.

# view one of the central octahedral cages
octahedralBoyd = [755, 824, 844, 792, 828, 836, 909, 534, 718, 756, 303, 387, 1279, 1523, 1538, 1575, 1565, 1643, 1658, 1649, 1672, 1717, 1723, 1747, 1761, 1777, 1767, 1820, 1816, 821, 827, 1414, 1420, 1430, 1436, 1483, 1493, 1481, 1459, 1405, 1480, 1443, 1432, 1418, 1424, 1505, 1487, 1532, 1549, 1563, 1569, 1586, 1653, 634, 1647, 1627, 1579, 1542, 1701, 1735, 1765, 1788, 1727, 1745, 1811, 1781, 1818, 1721, 641, 1497, 1803, 498, 489, 589, 543, 1771, 678, 727, 671, 759, 748, 597, 801, 841, 843, 873, 880, 895, 1398, 1667, 1736, 1756, 1634, 1668, 1708, 1740, 1748, 1821, 1450, 2383, 2510, 2578, 2644, 2672, 2712, 2727, 2370, 2387, 2506, 2538, 2577, 2612, 2656, 2664, 2708, 2714, 2722, 2724, 2187, 3038, 3127, 3182, 2281, 2288, 2293, 2300, 2374, 2429, 2437, 2517, 2522, 2529, 2569, 2581, 2591, 2596, 2603, 2663, 2669, 2717, 3197, 3209, 3216, 3240, 3250, 3258, 3263, 3265, 3298, 3302, 3313, 3336, 3345, 3358, 3380, 3385, 3395, 3417, 3438, 3445, 3469, 3479, 3512, 3519, 3543, 3553, 3561, 3567, 3597, 3603, 3619, 3625, 3633, 3648, 2645, 3482, 3585, 3640, 2284, 2296, 2305, 2309, 2318, 2363, 2378, 2408, 2418, 2425, 2432, 2453, 2462, 2469, 2490, 2499, 2513, 2525, 2534, 2547, 2587, 2599, 2608, 2621, 2643, 2653, 2692, 2701, 3201, 3204, 3213, 3226, 3233, 3236, 3246, 3252, 3262, 3271, 3294, 3309, 3315, 3324, 3334, 3340, 3350, 3354, 3360, 3369, 3378, 3384, 3391, 3397, 3406, 3415, 3421, 3433, 3442, 3455, 3465, 3475, 3483, 3494, 3507, 3516, 3529, 3539, 3549, 3573, 3583, 3593, 3599, 3608, 3617, 3623, 3638, 3646, 3569, 3642, 3627, 3635, 2572, 2665, 2719, 3291, 3426, 3490, 3500, 3540, 3556, 3584, 3639, 3278, 3287, 3430, 3462, 3489, 3504, 3536, 3568, 3576, 3630, 3634, 3636]

# a tetrahedral cage adjacent to the above octahedral
tetrahedralBoyd = [2325, 2335, 2341, 2352, 2360, 2383, 2398, 2404, 2443, 2449, 2480, 2486, 2510, 2544, 2554, 2564, 2618, 2628, 2638, 2682, 2688, 2712, 2727, 2735, 2508, 2710, 2716, 2725, 2389, 2370, 2538, 2612, 2714, 2724, 2281, 2288, 2293, 2300, 2315, 2320, 2365, 2374, 2411, 2423, 2429, 2437, 2456, 2467, 2493, 2504, 2517, 2522, 2529, 2549, 2591, 2596, 2603, 2623, 2695, 2706, 2717, 3240, 3250, 3258, 3263, 3265, 3302, 3313, 3358, 3385, 3395, 3469, 3479, 3543, 3553, 3587, 3597, 3625, 3633, 2471, 2515, 2527, 2589, 2601, 2536, 2610, 3640, 2286, 2298, 2307, 2380, 2427, 2434, 2309, 2318, 2363, 2408, 2418, 2453, 2462, 2490, 2499, 2547, 2621, 2692, 2701, 3646, 2719]


#list_atoms_to_view = octahedral + tetrahedral
Tetra21OctaRogge = [294, 416, 431, 430, 412, 448, 296, 749, 860, 880, 912, 796, 691, 764, 524, 870, 585, 631, 583, 790, 780, 896, 615, 892, 529, 613, 523, 908, 755, 675, 632, 888, 614, 633, 875, 531, 823, 525, 530, 840, 673, 900, 751, 864, 589, 591, 798, 878, 858, 759, 910, 1332, 1160, 1159, 413, 300, 1161, 746, 871, 1789, 1194, 485, 501, 1408, 844, 1409, 1601, 1600, 1729, 466, 770, 1050, 692, 546, 775, 484, 486, 610, 1769, 847, 1371, 611, 726, 715, 717, 584, 515,665,660, 570, 640, 765, 1821, 500, 724, 1672, 884, 666, 805, 514, 1602, 1683, 569, 568, 854, 832, 725, 785, 879, 1562, 664, 827, 612, 1815, 544, 642, 545, 783, 469, 674, 811, 470, 716, 471, 1657, 641, 1779, 516, 1369, 1370, 1721, 658,499, 467, 818, 659, 1048, 1049, 1192, 850, 1253, 1193, 562, 855, 706, 1312, 563, 707, 1293, 733, 734, 1016, 883, 1659, 1771, 1823, 1500, 2314, 1753, 1765, 1478, 1811, 869, 1546, 803, 590, 708, 564, 836, 1529, 1440, 1635, 1498, 1631,1630, 863, 1797, 1707, 1736, 1634, 1633, 1547, 1445, 1548, 1743, 1444, 1819, 1803, 1530, 1528, 748, 1439, 895, 1691, 756, 1438, 1788, 1499, 1701, 1446, 735, 1206, 1328, 1343, 1360, 1342, 1324, 1208, 1015, 1661, 1772, 1792, 1824, 1410,1260, 1017, 1436, 1782, 1776, 1561, 1800, 1680, 1702, 1808, 1563, 1787, 1667, 1435, 1441, 1443, 1525, 1544, 1752, 1442, 1437, 1820, 1692, 1527, 1543, 1804, 1545, 1735, 1663, 1812, 1526, 1477, 1632, 1790, 1671, 1770, 1718, 1479, 1822,2581, 2690, 2697, 2726, 693, 2577, 2686, 2705, 2722, 2714, 2718, 2403, 2505, 2730, 2401, 2503, 2618, 2586, 2242, 3038, 3145, 3181, 2570, 2578, 2685, 2695, 3256, 3257, 3258, 3274, 3275, 3276, 3358, 3359, 3360, 3364, 3365, 3366, 3513,3527, 3558, 3561, 3613, 3618, 3641, 2717, 3625, 3633, 3549, 3225, 3420, 3497, 3551, 3419, 3215, 468, 3418, 3214, 3223, 3335, 3224, 3574, 3334, 3433, 3479, 3434, 3290, 3478, 3565, 2708, 3639, 3481, 3603, 3404, 3480, 2332, 2333, 2334,2374, 2375, 2376, 2428, 2429, 2430, 2470, 2471, 2472, 2605, 2611, 2644, 2663, 2698, 2707, 3483, 3494, 3595, 3601, 3647, 2631, 3637, 2676, 2535, 2658, 2402, 2534, 2315, 2597, 2400, 2672, 2636, 2496, 2399, 1377, 2556, 2494, 2555, 2504,2554, 2533, 2300, 1376, 2495, 2398, 2299, 1722, 1757, 1375, 1415, 1607, 1568, 1414, 1608, 3535, 2316, 3336, 1681, 3635, 2719, 3627, 3621, 2572, 2687, 3643, 3435, 1606, 3493, 3602, 3609, 3510, 3405, 3638, 3216, 3403, 3291, 3538, 3289,3489, 3598, 3617, 3634, 3630, 3642, 3626, 1678, 1567, 1569, 1416]


# Tetra cages are defined by the 3 Zr boned to the mu3-O pointing into the cage. 3 Zr on 4 SBU = 12 total atoms
RoggeTetramu3OH = [1815,1821,1803,1819,1808,1820,1812,1822,3633,3625,3638,3630]

RoggeTetramu3O = [892, 908, 900, 910, 1815, 1821, 895, 1819, 2726, 2714, 3633, 2717]

# Octahedral cage is defined by 5 atoms at each SBU: a central Zr and the 4 bonded linker oxygen. With 6 SBUs forming the corners of the octahedral, this yields 30 atoms
RoggeOcta = [564, 612, 516, 468, 1500, 1548, 1440, 1819, 708, 1632, 2714, 3276, 3360, 3633, 3420, 660, 2376, 2472, 3637, 2556, 3647, 2400, 2496, 3336, 1608, 2316, 3216, 3630, 3480, 1416]
# add additional atom types to view. This adds all acetone atoms to the selection
list_atom_types_to_view = [10, 11, 12, 13]
list_atoms_to_view = Tetra21OctaRogge

print('ParticleIdentifier == ')
print(*list_atoms_to_view, sep=' || ParticleIdentifier == ')
print(' || ParticleType == ')
print(*list_atom_types_to_view, sep=' || ParticleType == ')
#with open('RoggeCagesAtoms.txt', 'w') as f:
#	for val in list_atoms_to_view:
#		f.write(f'{val} ')
